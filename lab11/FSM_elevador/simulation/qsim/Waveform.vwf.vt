// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/10/2025 15:24:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FSM_elevador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FSM_elevador_vlg_sample_tst(
	botao_descer,
	botao_subir,
	clk_in,
	rst,
	sampler_tx
);
input  botao_descer;
input  botao_subir;
input  clk_in;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(botao_descer or botao_subir or clk_in or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FSM_elevador_vlg_check_tst (
	acao,
	andar,
	disp_A1,
	disp_B1,
	disp_C1,
	disp_D1,
	disp_E1,
	disp_F1,
	disp_G1,
	dispPC1_A,
	dispPC1_B,
	dispPC1_C,
	dispPC1_D,
	dispPC1_E,
	dispPC1_F,
	dispPC1_G,
	rst_descer,
	rst_subir,
	sampler_rx
);
input [3:0] acao;
input [3:0] andar;
input  disp_A1;
input  disp_B1;
input  disp_C1;
input  disp_D1;
input  disp_E1;
input  disp_F1;
input  disp_G1;
input  dispPC1_A;
input  dispPC1_B;
input  dispPC1_C;
input  dispPC1_D;
input  dispPC1_E;
input  dispPC1_F;
input  dispPC1_G;
input  rst_descer;
input  rst_subir;
input sampler_rx;

reg [3:0] acao_expected;
reg [3:0] andar_expected;
reg  disp_A1_expected;
reg  disp_B1_expected;
reg  disp_C1_expected;
reg  disp_D1_expected;
reg  disp_E1_expected;
reg  disp_F1_expected;
reg  disp_G1_expected;
reg  dispPC1_A_expected;
reg  dispPC1_B_expected;
reg  dispPC1_C_expected;
reg  dispPC1_D_expected;
reg  dispPC1_E_expected;
reg  dispPC1_F_expected;
reg  dispPC1_G_expected;
reg  rst_descer_expected;
reg  rst_subir_expected;

reg [3:0] acao_prev;
reg [3:0] andar_prev;
reg  disp_A1_prev;
reg  disp_B1_prev;
reg  disp_C1_prev;
reg  disp_D1_prev;
reg  disp_E1_prev;
reg  disp_F1_prev;
reg  disp_G1_prev;
reg  dispPC1_A_prev;
reg  dispPC1_B_prev;
reg  dispPC1_C_prev;
reg  dispPC1_D_prev;
reg  dispPC1_E_prev;
reg  dispPC1_F_prev;
reg  dispPC1_G_prev;
reg  rst_descer_prev;
reg  rst_subir_prev;

reg [3:0] acao_expected_prev;
reg [3:0] andar_expected_prev;
reg  rst_descer_expected_prev;
reg  rst_subir_expected_prev;

reg [3:0] last_acao_exp;
reg [3:0] last_andar_exp;
reg  last_rst_descer_exp;
reg  last_rst_subir_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	acao_prev = acao;
	andar_prev = andar;
	disp_A1_prev = disp_A1;
	disp_B1_prev = disp_B1;
	disp_C1_prev = disp_C1;
	disp_D1_prev = disp_D1;
	disp_E1_prev = disp_E1;
	disp_F1_prev = disp_F1;
	disp_G1_prev = disp_G1;
	dispPC1_A_prev = dispPC1_A;
	dispPC1_B_prev = dispPC1_B;
	dispPC1_C_prev = dispPC1_C;
	dispPC1_D_prev = dispPC1_D;
	dispPC1_E_prev = dispPC1_E;
	dispPC1_F_prev = dispPC1_F;
	dispPC1_G_prev = dispPC1_G;
	rst_descer_prev = rst_descer;
	rst_subir_prev = rst_subir;
end

// update expected /o prevs

always @(trigger)
begin
	acao_expected_prev = acao_expected;
	andar_expected_prev = andar_expected;
	rst_descer_expected_prev = rst_descer_expected;
	rst_subir_expected_prev = rst_subir_expected;
end



// expected rst_subir
initial
begin
	rst_subir_expected = 1'bX;
end 

// expected rst_descer
initial
begin
	rst_descer_expected = 1'bX;
end 
// expected acao[ 3 ]
initial
begin
	acao_expected[3] = 1'bX;
end 
// expected acao[ 2 ]
initial
begin
	acao_expected[2] = 1'bX;
end 
// expected acao[ 1 ]
initial
begin
	acao_expected[1] = 1'bX;
end 
// expected acao[ 0 ]
initial
begin
	acao_expected[0] = 1'bX;
end 
// expected andar[ 3 ]
initial
begin
	andar_expected[3] = 1'bX;
end 
// expected andar[ 2 ]
initial
begin
	andar_expected[2] = 1'bX;
end 
// expected andar[ 1 ]
initial
begin
	andar_expected[1] = 1'bX;
end 
// expected andar[ 0 ]
initial
begin
	andar_expected[0] = 1'bX;
end 
// generate trigger
always @(acao_expected or acao or andar_expected or andar or disp_A1_expected or disp_A1 or disp_B1_expected or disp_B1 or disp_C1_expected or disp_C1 or disp_D1_expected or disp_D1 or disp_E1_expected or disp_E1 or disp_F1_expected or disp_F1 or disp_G1_expected or disp_G1 or dispPC1_A_expected or dispPC1_A or dispPC1_B_expected or dispPC1_B or dispPC1_C_expected or dispPC1_C or dispPC1_D_expected or dispPC1_D or dispPC1_E_expected or dispPC1_E or dispPC1_F_expected or dispPC1_F or dispPC1_G_expected or dispPC1_G or rst_descer_expected or rst_descer or rst_subir_expected or rst_subir)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected acao = %b | expected andar = %b | expected disp_A1 = %b | expected disp_B1 = %b | expected disp_C1 = %b | expected disp_D1 = %b | expected disp_E1 = %b | expected disp_F1 = %b | expected disp_G1 = %b | expected dispPC1_A = %b | expected dispPC1_B = %b | expected dispPC1_C = %b | expected dispPC1_D = %b | expected dispPC1_E = %b | expected dispPC1_F = %b | expected dispPC1_G = %b | expected rst_descer = %b | expected rst_subir = %b | ",acao_expected_prev,andar_expected_prev,disp_A1_expected_prev,disp_B1_expected_prev,disp_C1_expected_prev,disp_D1_expected_prev,disp_E1_expected_prev,disp_F1_expected_prev,disp_G1_expected_prev,dispPC1_A_expected_prev,dispPC1_B_expected_prev,dispPC1_C_expected_prev,dispPC1_D_expected_prev,dispPC1_E_expected_prev,dispPC1_F_expected_prev,dispPC1_G_expected_prev,rst_descer_expected_prev,rst_subir_expected_prev);
	$display("| real acao = %b | real andar = %b | real disp_A1 = %b | real disp_B1 = %b | real disp_C1 = %b | real disp_D1 = %b | real disp_E1 = %b | real disp_F1 = %b | real disp_G1 = %b | real dispPC1_A = %b | real dispPC1_B = %b | real dispPC1_C = %b | real dispPC1_D = %b | real dispPC1_E = %b | real dispPC1_F = %b | real dispPC1_G = %b | real rst_descer = %b | real rst_subir = %b | ",acao_prev,andar_prev,disp_A1_prev,disp_B1_prev,disp_C1_prev,disp_D1_prev,disp_E1_prev,disp_F1_prev,disp_G1_prev,dispPC1_A_prev,dispPC1_B_prev,dispPC1_C_prev,dispPC1_D_prev,dispPC1_E_prev,dispPC1_F_prev,dispPC1_G_prev,rst_descer_prev,rst_subir_prev);
`endif
	if (
		( acao_expected_prev[0] !== 1'bx ) && ( acao_prev[0] !== acao_expected_prev[0] )
		&& ((acao_expected_prev[0] !== last_acao_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acao_expected_prev);
		$display ("     Real value = %b", acao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_acao_exp[0] = acao_expected_prev[0];
	end
	if (
		( acao_expected_prev[1] !== 1'bx ) && ( acao_prev[1] !== acao_expected_prev[1] )
		&& ((acao_expected_prev[1] !== last_acao_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acao_expected_prev);
		$display ("     Real value = %b", acao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_acao_exp[1] = acao_expected_prev[1];
	end
	if (
		( acao_expected_prev[2] !== 1'bx ) && ( acao_prev[2] !== acao_expected_prev[2] )
		&& ((acao_expected_prev[2] !== last_acao_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acao_expected_prev);
		$display ("     Real value = %b", acao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_acao_exp[2] = acao_expected_prev[2];
	end
	if (
		( acao_expected_prev[3] !== 1'bx ) && ( acao_prev[3] !== acao_expected_prev[3] )
		&& ((acao_expected_prev[3] !== last_acao_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acao_expected_prev);
		$display ("     Real value = %b", acao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_acao_exp[3] = acao_expected_prev[3];
	end
	if (
		( andar_expected_prev[0] !== 1'bx ) && ( andar_prev[0] !== andar_expected_prev[0] )
		&& ((andar_expected_prev[0] !== last_andar_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port andar[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", andar_expected_prev);
		$display ("     Real value = %b", andar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_andar_exp[0] = andar_expected_prev[0];
	end
	if (
		( andar_expected_prev[1] !== 1'bx ) && ( andar_prev[1] !== andar_expected_prev[1] )
		&& ((andar_expected_prev[1] !== last_andar_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port andar[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", andar_expected_prev);
		$display ("     Real value = %b", andar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_andar_exp[1] = andar_expected_prev[1];
	end
	if (
		( andar_expected_prev[2] !== 1'bx ) && ( andar_prev[2] !== andar_expected_prev[2] )
		&& ((andar_expected_prev[2] !== last_andar_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port andar[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", andar_expected_prev);
		$display ("     Real value = %b", andar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_andar_exp[2] = andar_expected_prev[2];
	end
	if (
		( andar_expected_prev[3] !== 1'bx ) && ( andar_prev[3] !== andar_expected_prev[3] )
		&& ((andar_expected_prev[3] !== last_andar_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port andar[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", andar_expected_prev);
		$display ("     Real value = %b", andar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_andar_exp[3] = andar_expected_prev[3];
	end
	if (
		( rst_descer_expected_prev !== 1'bx ) && ( rst_descer_prev !== rst_descer_expected_prev )
		&& ((rst_descer_expected_prev !== last_rst_descer_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rst_descer :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rst_descer_expected_prev);
		$display ("     Real value = %b", rst_descer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_rst_descer_exp = rst_descer_expected_prev;
	end
	if (
		( rst_subir_expected_prev !== 1'bx ) && ( rst_subir_prev !== rst_subir_expected_prev )
		&& ((rst_subir_expected_prev !== last_rst_subir_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rst_subir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rst_subir_expected_prev);
		$display ("     Real value = %b", rst_subir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_rst_subir_exp = rst_subir_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FSM_elevador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botao_descer;
reg botao_subir;
reg clk_in;
reg rst;
// wires                                               
wire [3:0] acao;
wire [3:0] andar;
wire disp_A1;
wire disp_B1;
wire disp_C1;
wire disp_D1;
wire disp_E1;
wire disp_F1;
wire disp_G1;
wire dispPC1_A;
wire dispPC1_B;
wire dispPC1_C;
wire dispPC1_D;
wire dispPC1_E;
wire dispPC1_F;
wire dispPC1_G;
wire rst_descer;
wire rst_subir;

wire sampler;                             

// assign statements (if any)                          
FSM_elevador i1 (
// port map - connection between master ports and signals/registers   
	.acao(acao),
	.andar(andar),
	.botao_descer(botao_descer),
	.botao_subir(botao_subir),
	.clk_in(clk_in),
	.disp_A1(disp_A1),
	.disp_B1(disp_B1),
	.disp_C1(disp_C1),
	.disp_D1(disp_D1),
	.disp_E1(disp_E1),
	.disp_F1(disp_F1),
	.disp_G1(disp_G1),
	.dispPC1_A(dispPC1_A),
	.dispPC1_B(dispPC1_B),
	.dispPC1_C(dispPC1_C),
	.dispPC1_D(dispPC1_D),
	.dispPC1_E(dispPC1_E),
	.dispPC1_F(dispPC1_F),
	.dispPC1_G(dispPC1_G),
	.rst(rst),
	.rst_descer(rst_descer),
	.rst_subir(rst_subir)
);

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #20000 1'b1;
	#20000;
end 

// botao_descer
initial
begin
	botao_descer = 1'b0;
	botao_descer = #260000 1'b1;
	botao_descer = #170000 1'b0;
end 

// botao_subir
initial
begin
	botao_subir = 1'b0;
	botao_subir = #90000 1'b1;
	botao_subir = #40000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 

FSM_elevador_vlg_sample_tst tb_sample (
	.botao_descer(botao_descer),
	.botao_subir(botao_subir),
	.clk_in(clk_in),
	.rst(rst),
	.sampler_tx(sampler)
);

FSM_elevador_vlg_check_tst tb_out(
	.acao(acao),
	.andar(andar),
	.disp_A1(disp_A1),
	.disp_B1(disp_B1),
	.disp_C1(disp_C1),
	.disp_D1(disp_D1),
	.disp_E1(disp_E1),
	.disp_F1(disp_F1),
	.disp_G1(disp_G1),
	.dispPC1_A(dispPC1_A),
	.dispPC1_B(dispPC1_B),
	.dispPC1_C(dispPC1_C),
	.dispPC1_D(dispPC1_D),
	.dispPC1_E(dispPC1_E),
	.dispPC1_F(dispPC1_F),
	.dispPC1_G(dispPC1_G),
	.rst_descer(rst_descer),
	.rst_subir(rst_subir),
	.sampler_rx(sampler)
);
endmodule

