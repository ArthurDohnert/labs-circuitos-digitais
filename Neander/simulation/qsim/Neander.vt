// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/07/2025 08:37:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Neander
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Neander_vlg_sample_tst(
	clk_in,
	rst_in,
	run_debug,
	run_sel,
	sampler_tx
);
input  clk_in;
input  rst_in;
input  run_debug;
input  run_sel;
output sampler_tx;

reg sample;
time current_time;
always @(clk_in or rst_in or run_debug or run_sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Neander_vlg_check_tst (
	AC_val,
	ADD,
	AND,
	cargaAC,
	cargaNZ,
	cargaPC,
	cargaRDM,
	cargaREM,
	cargaRI,
	goto_t0,
	incrementaPC,
	instrucoes,
	NOT,
	opcode,
	OR,
	Read,
	sel,
	tempo,
	Write,
	Y,
	sampler_rx
);
input [7:0] AC_val;
input  ADD;
input  AND;
input  cargaAC;
input  cargaNZ;
input  cargaPC;
input  cargaRDM;
input  cargaREM;
input  cargaRI;
input  goto_t0;
input  incrementaPC;
input [15:0] instrucoes;
input  NOT;
input [7:0] opcode;
input  OR;
input  Read;
input  sel;
input [2:0] tempo;
input  Write;
input  Y;
input sampler_rx;

reg [7:0] AC_val_expected;
reg  ADD_expected;
reg  AND_expected;
reg  cargaAC_expected;
reg  cargaNZ_expected;
reg  cargaPC_expected;
reg  cargaRDM_expected;
reg  cargaREM_expected;
reg  cargaRI_expected;
reg  goto_t0_expected;
reg  incrementaPC_expected;
reg [15:0] instrucoes_expected;
reg  NOT_expected;
reg [7:0] opcode_expected;
reg  OR_expected;
reg  Read_expected;
reg  sel_expected;
reg [2:0] tempo_expected;
reg  Write_expected;
reg  Y_expected;

reg [7:0] AC_val_prev;
reg  ADD_prev;
reg  AND_prev;
reg  cargaAC_prev;
reg  cargaNZ_prev;
reg  cargaPC_prev;
reg  cargaRDM_prev;
reg  cargaREM_prev;
reg  cargaRI_prev;
reg  goto_t0_prev;
reg  incrementaPC_prev;
reg [15:0] instrucoes_prev;
reg  NOT_prev;
reg [7:0] opcode_prev;
reg  OR_prev;
reg  Read_prev;
reg  sel_prev;
reg [2:0] tempo_prev;
reg  Write_prev;
reg  Y_prev;

reg [7:0] AC_val_expected_prev;

reg [7:0] last_AC_val_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:20] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 20'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC_val_prev = AC_val;
	ADD_prev = ADD;
	AND_prev = AND;
	cargaAC_prev = cargaAC;
	cargaNZ_prev = cargaNZ;
	cargaPC_prev = cargaPC;
	cargaRDM_prev = cargaRDM;
	cargaREM_prev = cargaREM;
	cargaRI_prev = cargaRI;
	goto_t0_prev = goto_t0;
	incrementaPC_prev = incrementaPC;
	instrucoes_prev = instrucoes;
	NOT_prev = NOT;
	opcode_prev = opcode;
	OR_prev = OR;
	Read_prev = Read;
	sel_prev = sel;
	tempo_prev = tempo;
	Write_prev = Write;
	Y_prev = Y;
end

// update expected /o prevs

always @(trigger)
begin
	AC_val_expected_prev = AC_val_expected;
end


// expected AC_val[ 7 ]
initial
begin
	AC_val_expected[7] = 1'bX;
end 
// expected AC_val[ 6 ]
initial
begin
	AC_val_expected[6] = 1'bX;
end 
// expected AC_val[ 5 ]
initial
begin
	AC_val_expected[5] = 1'bX;
end 
// expected AC_val[ 4 ]
initial
begin
	AC_val_expected[4] = 1'bX;
end 
// expected AC_val[ 3 ]
initial
begin
	AC_val_expected[3] = 1'bX;
end 
// expected AC_val[ 2 ]
initial
begin
	AC_val_expected[2] = 1'bX;
end 
// expected AC_val[ 1 ]
initial
begin
	AC_val_expected[1] = 1'bX;
end 
// expected AC_val[ 0 ]
initial
begin
	AC_val_expected[0] = 1'bX;
end 
// generate trigger
always @(AC_val_expected or AC_val or ADD_expected or ADD or AND_expected or AND or cargaAC_expected or cargaAC or cargaNZ_expected or cargaNZ or cargaPC_expected or cargaPC or cargaRDM_expected or cargaRDM or cargaREM_expected or cargaREM or cargaRI_expected or cargaRI or goto_t0_expected or goto_t0 or incrementaPC_expected or incrementaPC or instrucoes_expected or instrucoes or NOT_expected or NOT or opcode_expected or opcode or OR_expected or OR or Read_expected or Read or sel_expected or sel or tempo_expected or tempo or Write_expected or Write or Y_expected or Y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC_val = %b | expected ADD = %b | expected AND = %b | expected cargaAC = %b | expected cargaNZ = %b | expected cargaPC = %b | expected cargaRDM = %b | expected cargaREM = %b | expected cargaRI = %b | expected goto_t0 = %b | expected incrementaPC = %b | expected instrucoes = %b | expected NOT = %b | expected opcode = %b | expected OR = %b | expected Read = %b | expected sel = %b | expected tempo = %b | expected Write = %b | expected Y = %b | ",AC_val_expected_prev,ADD_expected_prev,AND_expected_prev,cargaAC_expected_prev,cargaNZ_expected_prev,cargaPC_expected_prev,cargaRDM_expected_prev,cargaREM_expected_prev,cargaRI_expected_prev,goto_t0_expected_prev,incrementaPC_expected_prev,instrucoes_expected_prev,NOT_expected_prev,opcode_expected_prev,OR_expected_prev,Read_expected_prev,sel_expected_prev,tempo_expected_prev,Write_expected_prev,Y_expected_prev);
	$display("| real AC_val = %b | real ADD = %b | real AND = %b | real cargaAC = %b | real cargaNZ = %b | real cargaPC = %b | real cargaRDM = %b | real cargaREM = %b | real cargaRI = %b | real goto_t0 = %b | real incrementaPC = %b | real instrucoes = %b | real NOT = %b | real opcode = %b | real OR = %b | real Read = %b | real sel = %b | real tempo = %b | real Write = %b | real Y = %b | ",AC_val_prev,ADD_prev,AND_prev,cargaAC_prev,cargaNZ_prev,cargaPC_prev,cargaRDM_prev,cargaREM_prev,cargaRI_prev,goto_t0_prev,incrementaPC_prev,instrucoes_prev,NOT_prev,opcode_prev,OR_prev,Read_prev,sel_prev,tempo_prev,Write_prev,Y_prev);
`endif
	if (
		( AC_val_expected_prev[0] !== 1'bx ) && ( AC_val_prev[0] !== AC_val_expected_prev[0] )
		&& ((AC_val_expected_prev[0] !== last_AC_val_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[0] = AC_val_expected_prev[0];
	end
	if (
		( AC_val_expected_prev[1] !== 1'bx ) && ( AC_val_prev[1] !== AC_val_expected_prev[1] )
		&& ((AC_val_expected_prev[1] !== last_AC_val_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[1] = AC_val_expected_prev[1];
	end
	if (
		( AC_val_expected_prev[2] !== 1'bx ) && ( AC_val_prev[2] !== AC_val_expected_prev[2] )
		&& ((AC_val_expected_prev[2] !== last_AC_val_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[2] = AC_val_expected_prev[2];
	end
	if (
		( AC_val_expected_prev[3] !== 1'bx ) && ( AC_val_prev[3] !== AC_val_expected_prev[3] )
		&& ((AC_val_expected_prev[3] !== last_AC_val_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[3] = AC_val_expected_prev[3];
	end
	if (
		( AC_val_expected_prev[4] !== 1'bx ) && ( AC_val_prev[4] !== AC_val_expected_prev[4] )
		&& ((AC_val_expected_prev[4] !== last_AC_val_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[4] = AC_val_expected_prev[4];
	end
	if (
		( AC_val_expected_prev[5] !== 1'bx ) && ( AC_val_prev[5] !== AC_val_expected_prev[5] )
		&& ((AC_val_expected_prev[5] !== last_AC_val_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[5] = AC_val_expected_prev[5];
	end
	if (
		( AC_val_expected_prev[6] !== 1'bx ) && ( AC_val_prev[6] !== AC_val_expected_prev[6] )
		&& ((AC_val_expected_prev[6] !== last_AC_val_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[6] = AC_val_expected_prev[6];
	end
	if (
		( AC_val_expected_prev[7] !== 1'bx ) && ( AC_val_prev[7] !== AC_val_expected_prev[7] )
		&& ((AC_val_expected_prev[7] !== last_AC_val_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_val[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_val_expected_prev);
		$display ("     Real value = %b", AC_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_val_exp[7] = AC_val_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Neander_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_in;
reg rst_in;
reg run_debug;
reg run_sel;
// wires                                               
wire [7:0] AC_val;
wire ADD;
wire AND;
wire cargaAC;
wire cargaNZ;
wire cargaPC;
wire cargaRDM;
wire cargaREM;
wire cargaRI;
wire goto_t0;
wire incrementaPC;
wire [15:0] instrucoes;
wire NOT;
wire [7:0] opcode;
wire OR;
wire Read;
wire sel;
wire [2:0] tempo;
wire Write;
wire Y;

wire sampler;                             

// assign statements (if any)                          
Neander i1 (
// port map - connection between master ports and signals/registers   
	.AC_val(AC_val),
	.ADD(ADD),
	.\AND (AND),
	.cargaAC(cargaAC),
	.cargaNZ(cargaNZ),
	.cargaPC(cargaPC),
	.cargaRDM(cargaRDM),
	.cargaREM(cargaREM),
	.cargaRI(cargaRI),
	.clk_in(clk_in),
	.goto_t0(goto_t0),
	.incrementaPC(incrementaPC),
	.instrucoes(instrucoes),
	.\NOT (NOT),
	.opcode(opcode),
	.\OR (OR),
	.Read(Read),
	.rst_in(rst_in),
	.run_debug(run_debug),
	.run_sel(run_sel),
	.sel(sel),
	.tempo(tempo),
	.Write(Write),
	.Y(Y)
);

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #5000 1'b1;
	#5000;
end 

// rst_in
initial
begin
	rst_in = 1'b0;
end 

// run_debug
initial
begin
	run_debug = 1'b0;
end 

// run_sel
initial
begin
	run_sel = 1'b0;
end 

Neander_vlg_sample_tst tb_sample (
	.clk_in(clk_in),
	.rst_in(rst_in),
	.run_debug(run_debug),
	.run_sel(run_sel),
	.sampler_tx(sampler)
);

Neander_vlg_check_tst tb_out(
	.AC_val(AC_val),
	.ADD(ADD),
	.AND(AND),
	.cargaAC(cargaAC),
	.cargaNZ(cargaNZ),
	.cargaPC(cargaPC),
	.cargaRDM(cargaRDM),
	.cargaREM(cargaREM),
	.cargaRI(cargaRI),
	.goto_t0(goto_t0),
	.incrementaPC(incrementaPC),
	.instrucoes(instrucoes),
	.NOT(NOT),
	.opcode(opcode),
	.OR(OR),
	.Read(Read),
	.sel(sel),
	.tempo(tempo),
	.Write(Write),
	.Y(Y),
	.sampler_rx(sampler)
);
endmodule

