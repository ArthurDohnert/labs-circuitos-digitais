// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/09/2025 16:19:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab10
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab10_vlg_sample_tst(
	clk_in,
	rst,
	sampler_tx
);
input  clk_in;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk_in or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab10_vlg_check_tst (
	Amarelo,
	tempo,
	Verde,
	Vermelho,
	sampler_rx
);
input  Amarelo;
input [15:0] tempo;
input  Verde;
input  Vermelho;
input sampler_rx;

reg  Amarelo_expected;
reg [15:0] tempo_expected;
reg  Verde_expected;
reg  Vermelho_expected;

reg  Amarelo_prev;
reg [15:0] tempo_prev;
reg  Verde_prev;
reg  Vermelho_prev;

reg  Amarelo_expected_prev;
reg [15:0] tempo_expected_prev;
reg  Verde_expected_prev;
reg  Vermelho_expected_prev;

reg  last_Amarelo_exp;
reg [15:0] last_tempo_exp;
reg  last_Verde_exp;
reg  last_Vermelho_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Amarelo_prev = Amarelo;
	tempo_prev = tempo;
	Verde_prev = Verde;
	Vermelho_prev = Vermelho;
end

// update expected /o prevs

always @(trigger)
begin
	Amarelo_expected_prev = Amarelo_expected;
	tempo_expected_prev = tempo_expected;
	Verde_expected_prev = Verde_expected;
	Vermelho_expected_prev = Vermelho_expected;
end



// expected Verde
initial
begin
	Verde_expected = 1'bX;
end 

// expected Amarelo
initial
begin
	Amarelo_expected = 1'bX;
end 

// expected Vermelho
initial
begin
	Vermelho_expected = 1'bX;
end 
// expected tempo[ 15 ]
initial
begin
	tempo_expected[15] = 1'bX;
end 
// expected tempo[ 14 ]
initial
begin
	tempo_expected[14] = 1'bX;
end 
// expected tempo[ 13 ]
initial
begin
	tempo_expected[13] = 1'bX;
end 
// expected tempo[ 12 ]
initial
begin
	tempo_expected[12] = 1'bX;
end 
// expected tempo[ 11 ]
initial
begin
	tempo_expected[11] = 1'bX;
end 
// expected tempo[ 10 ]
initial
begin
	tempo_expected[10] = 1'bX;
end 
// expected tempo[ 9 ]
initial
begin
	tempo_expected[9] = 1'bX;
end 
// expected tempo[ 8 ]
initial
begin
	tempo_expected[8] = 1'bX;
end 
// expected tempo[ 7 ]
initial
begin
	tempo_expected[7] = 1'bX;
end 
// expected tempo[ 6 ]
initial
begin
	tempo_expected[6] = 1'bX;
end 
// expected tempo[ 5 ]
initial
begin
	tempo_expected[5] = 1'bX;
end 
// expected tempo[ 4 ]
initial
begin
	tempo_expected[4] = 1'bX;
end 
// expected tempo[ 3 ]
initial
begin
	tempo_expected[3] = 1'bX;
end 
// expected tempo[ 2 ]
initial
begin
	tempo_expected[2] = 1'bX;
end 
// expected tempo[ 1 ]
initial
begin
	tempo_expected[1] = 1'bX;
end 
// expected tempo[ 0 ]
initial
begin
	tempo_expected[0] = 1'bX;
end 
// generate trigger
always @(Amarelo_expected or Amarelo or tempo_expected or tempo or Verde_expected or Verde or Vermelho_expected or Vermelho)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Amarelo = %b | expected tempo = %b | expected Verde = %b | expected Vermelho = %b | ",Amarelo_expected_prev,tempo_expected_prev,Verde_expected_prev,Vermelho_expected_prev);
	$display("| real Amarelo = %b | real tempo = %b | real Verde = %b | real Vermelho = %b | ",Amarelo_prev,tempo_prev,Verde_prev,Vermelho_prev);
`endif
	if (
		( Amarelo_expected_prev !== 1'bx ) && ( Amarelo_prev !== Amarelo_expected_prev )
		&& ((Amarelo_expected_prev !== last_Amarelo_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amarelo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amarelo_expected_prev);
		$display ("     Real value = %b", Amarelo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Amarelo_exp = Amarelo_expected_prev;
	end
	if (
		( tempo_expected_prev[0] !== 1'bx ) && ( tempo_prev[0] !== tempo_expected_prev[0] )
		&& ((tempo_expected_prev[0] !== last_tempo_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[0] = tempo_expected_prev[0];
	end
	if (
		( tempo_expected_prev[1] !== 1'bx ) && ( tempo_prev[1] !== tempo_expected_prev[1] )
		&& ((tempo_expected_prev[1] !== last_tempo_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[1] = tempo_expected_prev[1];
	end
	if (
		( tempo_expected_prev[2] !== 1'bx ) && ( tempo_prev[2] !== tempo_expected_prev[2] )
		&& ((tempo_expected_prev[2] !== last_tempo_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[2] = tempo_expected_prev[2];
	end
	if (
		( tempo_expected_prev[3] !== 1'bx ) && ( tempo_prev[3] !== tempo_expected_prev[3] )
		&& ((tempo_expected_prev[3] !== last_tempo_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[3] = tempo_expected_prev[3];
	end
	if (
		( tempo_expected_prev[4] !== 1'bx ) && ( tempo_prev[4] !== tempo_expected_prev[4] )
		&& ((tempo_expected_prev[4] !== last_tempo_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[4] = tempo_expected_prev[4];
	end
	if (
		( tempo_expected_prev[5] !== 1'bx ) && ( tempo_prev[5] !== tempo_expected_prev[5] )
		&& ((tempo_expected_prev[5] !== last_tempo_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[5] = tempo_expected_prev[5];
	end
	if (
		( tempo_expected_prev[6] !== 1'bx ) && ( tempo_prev[6] !== tempo_expected_prev[6] )
		&& ((tempo_expected_prev[6] !== last_tempo_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[6] = tempo_expected_prev[6];
	end
	if (
		( tempo_expected_prev[7] !== 1'bx ) && ( tempo_prev[7] !== tempo_expected_prev[7] )
		&& ((tempo_expected_prev[7] !== last_tempo_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[7] = tempo_expected_prev[7];
	end
	if (
		( tempo_expected_prev[8] !== 1'bx ) && ( tempo_prev[8] !== tempo_expected_prev[8] )
		&& ((tempo_expected_prev[8] !== last_tempo_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[8] = tempo_expected_prev[8];
	end
	if (
		( tempo_expected_prev[9] !== 1'bx ) && ( tempo_prev[9] !== tempo_expected_prev[9] )
		&& ((tempo_expected_prev[9] !== last_tempo_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[9] = tempo_expected_prev[9];
	end
	if (
		( tempo_expected_prev[10] !== 1'bx ) && ( tempo_prev[10] !== tempo_expected_prev[10] )
		&& ((tempo_expected_prev[10] !== last_tempo_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[10] = tempo_expected_prev[10];
	end
	if (
		( tempo_expected_prev[11] !== 1'bx ) && ( tempo_prev[11] !== tempo_expected_prev[11] )
		&& ((tempo_expected_prev[11] !== last_tempo_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[11] = tempo_expected_prev[11];
	end
	if (
		( tempo_expected_prev[12] !== 1'bx ) && ( tempo_prev[12] !== tempo_expected_prev[12] )
		&& ((tempo_expected_prev[12] !== last_tempo_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[12] = tempo_expected_prev[12];
	end
	if (
		( tempo_expected_prev[13] !== 1'bx ) && ( tempo_prev[13] !== tempo_expected_prev[13] )
		&& ((tempo_expected_prev[13] !== last_tempo_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[13] = tempo_expected_prev[13];
	end
	if (
		( tempo_expected_prev[14] !== 1'bx ) && ( tempo_prev[14] !== tempo_expected_prev[14] )
		&& ((tempo_expected_prev[14] !== last_tempo_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[14] = tempo_expected_prev[14];
	end
	if (
		( tempo_expected_prev[15] !== 1'bx ) && ( tempo_prev[15] !== tempo_expected_prev[15] )
		&& ((tempo_expected_prev[15] !== last_tempo_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempo[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempo_expected_prev);
		$display ("     Real value = %b", tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tempo_exp[15] = tempo_expected_prev[15];
	end
	if (
		( Verde_expected_prev !== 1'bx ) && ( Verde_prev !== Verde_expected_prev )
		&& ((Verde_expected_prev !== last_Verde_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Verde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Verde_expected_prev);
		$display ("     Real value = %b", Verde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Verde_exp = Verde_expected_prev;
	end
	if (
		( Vermelho_expected_prev !== 1'bx ) && ( Vermelho_prev !== Vermelho_expected_prev )
		&& ((Vermelho_expected_prev !== last_Vermelho_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Vermelho :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Vermelho_expected_prev);
		$display ("     Real value = %b", Vermelho_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Vermelho_exp = Vermelho_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab10_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_in;
reg rst;
// wires                                               
wire Amarelo;
wire [15:0] tempo;
wire Verde;
wire Vermelho;

wire sampler;                             

// assign statements (if any)                          
lab10 i1 (
// port map - connection between master ports and signals/registers   
	.Amarelo(Amarelo),
	.clk_in(clk_in),
	.rst(rst),
	.tempo(tempo),
	.Verde(Verde),
	.Vermelho(Vermelho)
);

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
end 

lab10_vlg_sample_tst tb_sample (
	.clk_in(clk_in),
	.rst(rst),
	.sampler_tx(sampler)
);

lab10_vlg_check_tst tb_out(
	.Amarelo(Amarelo),
	.tempo(tempo),
	.Verde(Verde),
	.Vermelho(Vermelho),
	.sampler_rx(sampler)
);
endmodule

