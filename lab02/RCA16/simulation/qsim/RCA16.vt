// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/04/2025 18:22:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RCA16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RCA16_vlg_sample_tst(
	A0,
	B0,
	Cin,
	sampler_tx
);
input [15:0] A0;
input [15:0] B0;
input  Cin;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or B0 or Cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RCA16_vlg_check_tst (
	Coutt,
	S0,
	sampler_rx
);
input  Coutt;
input [15:0] S0;
input sampler_rx;

reg  Coutt_expected;
reg [15:0] S0_expected;

reg  Coutt_prev;
reg [15:0] S0_prev;

reg  Coutt_expected_prev;
reg [15:0] S0_expected_prev;

reg  last_Coutt_exp;
reg [15:0] last_S0_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Coutt_prev = Coutt;
	S0_prev = S0;
end

// update expected /o prevs

always @(trigger)
begin
	Coutt_expected_prev = Coutt_expected;
	S0_expected_prev = S0_expected;
end



// expected Coutt
initial
begin
	Coutt_expected = 1'bX;
end 
// expected S0[ 15 ]
initial
begin
	S0_expected[15] = 1'bX;
end 
// expected S0[ 14 ]
initial
begin
	S0_expected[14] = 1'bX;
end 
// expected S0[ 13 ]
initial
begin
	S0_expected[13] = 1'bX;
end 
// expected S0[ 12 ]
initial
begin
	S0_expected[12] = 1'bX;
end 
// expected S0[ 11 ]
initial
begin
	S0_expected[11] = 1'bX;
end 
// expected S0[ 10 ]
initial
begin
	S0_expected[10] = 1'bX;
end 
// expected S0[ 9 ]
initial
begin
	S0_expected[9] = 1'bX;
end 
// expected S0[ 8 ]
initial
begin
	S0_expected[8] = 1'bX;
end 
// expected S0[ 7 ]
initial
begin
	S0_expected[7] = 1'bX;
end 
// expected S0[ 6 ]
initial
begin
	S0_expected[6] = 1'bX;
end 
// expected S0[ 5 ]
initial
begin
	S0_expected[5] = 1'bX;
end 
// expected S0[ 4 ]
initial
begin
	S0_expected[4] = 1'bX;
end 
// expected S0[ 3 ]
initial
begin
	S0_expected[3] = 1'bX;
end 
// expected S0[ 2 ]
initial
begin
	S0_expected[2] = 1'bX;
end 
// expected S0[ 1 ]
initial
begin
	S0_expected[1] = 1'bX;
end 
// expected S0[ 0 ]
initial
begin
	S0_expected[0] = 1'bX;
end 
// generate trigger
always @(Coutt_expected or Coutt or S0_expected or S0)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Coutt = %b | expected S0 = %b | ",Coutt_expected_prev,S0_expected_prev);
	$display("| real Coutt = %b | real S0 = %b | ",Coutt_prev,S0_prev);
`endif
	if (
		( Coutt_expected_prev !== 1'bx ) && ( Coutt_prev !== Coutt_expected_prev )
		&& ((Coutt_expected_prev !== last_Coutt_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Coutt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Coutt_expected_prev);
		$display ("     Real value = %b", Coutt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Coutt_exp = Coutt_expected_prev;
	end
	if (
		( S0_expected_prev[0] !== 1'bx ) && ( S0_prev[0] !== S0_expected_prev[0] )
		&& ((S0_expected_prev[0] !== last_S0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[0] = S0_expected_prev[0];
	end
	if (
		( S0_expected_prev[1] !== 1'bx ) && ( S0_prev[1] !== S0_expected_prev[1] )
		&& ((S0_expected_prev[1] !== last_S0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[1] = S0_expected_prev[1];
	end
	if (
		( S0_expected_prev[2] !== 1'bx ) && ( S0_prev[2] !== S0_expected_prev[2] )
		&& ((S0_expected_prev[2] !== last_S0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[2] = S0_expected_prev[2];
	end
	if (
		( S0_expected_prev[3] !== 1'bx ) && ( S0_prev[3] !== S0_expected_prev[3] )
		&& ((S0_expected_prev[3] !== last_S0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[3] = S0_expected_prev[3];
	end
	if (
		( S0_expected_prev[4] !== 1'bx ) && ( S0_prev[4] !== S0_expected_prev[4] )
		&& ((S0_expected_prev[4] !== last_S0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[4] = S0_expected_prev[4];
	end
	if (
		( S0_expected_prev[5] !== 1'bx ) && ( S0_prev[5] !== S0_expected_prev[5] )
		&& ((S0_expected_prev[5] !== last_S0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[5] = S0_expected_prev[5];
	end
	if (
		( S0_expected_prev[6] !== 1'bx ) && ( S0_prev[6] !== S0_expected_prev[6] )
		&& ((S0_expected_prev[6] !== last_S0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[6] = S0_expected_prev[6];
	end
	if (
		( S0_expected_prev[7] !== 1'bx ) && ( S0_prev[7] !== S0_expected_prev[7] )
		&& ((S0_expected_prev[7] !== last_S0_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[7] = S0_expected_prev[7];
	end
	if (
		( S0_expected_prev[8] !== 1'bx ) && ( S0_prev[8] !== S0_expected_prev[8] )
		&& ((S0_expected_prev[8] !== last_S0_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[8] = S0_expected_prev[8];
	end
	if (
		( S0_expected_prev[9] !== 1'bx ) && ( S0_prev[9] !== S0_expected_prev[9] )
		&& ((S0_expected_prev[9] !== last_S0_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[9] = S0_expected_prev[9];
	end
	if (
		( S0_expected_prev[10] !== 1'bx ) && ( S0_prev[10] !== S0_expected_prev[10] )
		&& ((S0_expected_prev[10] !== last_S0_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[10] = S0_expected_prev[10];
	end
	if (
		( S0_expected_prev[11] !== 1'bx ) && ( S0_prev[11] !== S0_expected_prev[11] )
		&& ((S0_expected_prev[11] !== last_S0_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[11] = S0_expected_prev[11];
	end
	if (
		( S0_expected_prev[12] !== 1'bx ) && ( S0_prev[12] !== S0_expected_prev[12] )
		&& ((S0_expected_prev[12] !== last_S0_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[12] = S0_expected_prev[12];
	end
	if (
		( S0_expected_prev[13] !== 1'bx ) && ( S0_prev[13] !== S0_expected_prev[13] )
		&& ((S0_expected_prev[13] !== last_S0_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[13] = S0_expected_prev[13];
	end
	if (
		( S0_expected_prev[14] !== 1'bx ) && ( S0_prev[14] !== S0_expected_prev[14] )
		&& ((S0_expected_prev[14] !== last_S0_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[14] = S0_expected_prev[14];
	end
	if (
		( S0_expected_prev[15] !== 1'bx ) && ( S0_prev[15] !== S0_expected_prev[15] )
		&& ((S0_expected_prev[15] !== last_S0_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S0_exp[15] = S0_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RCA16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A0;
reg [15:0] B0;
reg Cin;
// wires                                               
wire Coutt;
wire [15:0] S0;

wire sampler;                             

// assign statements (if any)                          
RCA16 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.B0(B0),
	.Cin(Cin),
	.Coutt(Coutt),
	.S0(S0)
);
// A0[ 15 ]
initial
begin
	A0[15] = 1'b0;
	A0[15] = #140000 1'b1;
	A0[15] = #170000 1'b0;
end 
// A0[ 14 ]
initial
begin
	A0[14] = 1'b0;
	A0[14] = #140000 1'b1;
	A0[14] = #90000 1'b0;
end 
// A0[ 13 ]
initial
begin
	A0[13] = 1'b1;
	A0[13] = #70000 1'b0;
	A0[13] = #70000 1'b1;
	A0[13] = #170000 1'b0;
end 
// A0[ 12 ]
initial
begin
	A0[12] = 1'b1;
	A0[12] = #230000 1'b0;
end 
// A0[ 11 ]
initial
begin
	A0[11] = 1'b0;
	A0[11] = #140000 1'b1;
	A0[11] = #90000 1'b0;
end 
// A0[ 10 ]
initial
begin
	A0[10] = 1'b0;
	A0[10] = #140000 1'b1;
	A0[10] = #90000 1'b0;
end 
// A0[ 9 ]
initial
begin
	A0[9] = 1'b0;
	A0[9] = #140000 1'b1;
	A0[9] = #90000 1'b0;
end 
// A0[ 8 ]
initial
begin
	A0[8] = 1'b0;
	A0[8] = #140000 1'b1;
	A0[8] = #90000 1'b0;
end 
// A0[ 7 ]
initial
begin
	A0[7] = 1'b0;
	A0[7] = #70000 1'b1;
	A0[7] = #240000 1'b0;
end 
// A0[ 6 ]
initial
begin
	A0[6] = 1'b0;
	A0[6] = #140000 1'b1;
	A0[6] = #90000 1'b0;
end 
// A0[ 5 ]
initial
begin
	A0[5] = 1'b1;
	A0[5] = #70000 1'b0;
	A0[5] = #70000 1'b1;
	A0[5] = #170000 1'b0;
end 
// A0[ 4 ]
initial
begin
	A0[4] = 1'b1;
	A0[4] = #70000 1'b0;
	A0[4] = #70000 1'b1;
	A0[4] = #90000 1'b0;
end 
// A0[ 3 ]
initial
begin
	A0[3] = 1'b0;
	A0[3] = #140000 1'b1;
	A0[3] = #90000 1'b0;
end 
// A0[ 2 ]
initial
begin
	A0[2] = 1'b0;
	A0[2] = #140000 1'b1;
	A0[2] = #90000 1'b0;
end 
// A0[ 1 ]
initial
begin
	A0[1] = 1'b0;
	A0[1] = #140000 1'b1;
	A0[1] = #90000 1'b0;
end 
// A0[ 0 ]
initial
begin
	A0[0] = 1'b0;
	A0[0] = #140000 1'b1;
	A0[0] = #90000 1'b0;
end 
// B0[ 15 ]
initial
begin
	B0[15] = 1'b0;
	B0[15] = #230000 1'b1;
	B0[15] = #80000 1'b0;
end 
// B0[ 14 ]
initial
begin
	B0[14] = 1'b0;
	B0[14] = #230000 1'b1;
	B0[14] = #80000 1'b0;
end 
// B0[ 13 ]
initial
begin
	B0[13] = 1'b0;
end 
// B0[ 12 ]
initial
begin
	B0[12] = 1'b0;
	B0[12] = #70000 1'b1;
	B0[12] = #70000 1'b0;
end 
// B0[ 11 ]
initial
begin
	B0[11] = 1'b0;
end 
// B0[ 10 ]
initial
begin
	B0[10] = 1'b0;
end 
// B0[ 9 ]
initial
begin
	B0[9] = 1'b0;
end 
// B0[ 8 ]
initial
begin
	B0[8] = 1'b0;
end 
// B0[ 7 ]
initial
begin
	B0[7] = 1'b0;
	B0[7] = #70000 1'b1;
	B0[7] = #70000 1'b0;
	B0[7] = #90000 1'b1;
	B0[7] = #80000 1'b0;
end 
// B0[ 6 ]
initial
begin
	B0[6] = 1'b0;
	B0[6] = #230000 1'b1;
	B0[6] = #80000 1'b0;
end 
// B0[ 5 ]
initial
begin
	B0[5] = 1'b0;
end 
// B0[ 4 ]
initial
begin
	B0[4] = 1'b0;
end 
// B0[ 3 ]
initial
begin
	B0[3] = 1'b0;
end 
// B0[ 2 ]
initial
begin
	B0[2] = 1'b0;
end 
// B0[ 1 ]
initial
begin
	B0[1] = 1'b0;
end 
// B0[ 0 ]
initial
begin
	B0[0] = 1'b0;
	B0[0] = #140000 1'b1;
	B0[0] = #90000 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

RCA16_vlg_sample_tst tb_sample (
	.A0(A0),
	.B0(B0),
	.Cin(Cin),
	.sampler_tx(sampler)
);

RCA16_vlg_check_tst tb_out(
	.Coutt(Coutt),
	.S0(S0),
	.sampler_rx(sampler)
);
endmodule

